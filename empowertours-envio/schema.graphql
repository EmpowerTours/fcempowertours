# ✅ UPDATED: Added metadata fields for instant music playback

type MusicNFT @entity {
  id: ID!
  tokenId: String!
  contract: String!
  artist: String!
  owner: String!
  tokenURI: String!
  coverArt: String
  price: BigInt                # Track license price
  totalSold: Int               # Track total licenses sold
  active: Boolean              # Track if sales are active
  royaltyPercentage: Int       # Track royalty % (optional)
  
  # ✅ NEW: Metadata fields fetched from IPFS during indexing
  name: String                 # Song title from metadata.name
  description: String          # Description from metadata.description
  imageUrl: String             # Cover art URL (metadata.image resolved)
  previewAudioUrl: String      # Preview audio (metadata.animation_url resolved)
  fullAudioUrl: String         # Full track (metadata.external_url resolved)
  metadataFetched: Boolean!    # Track if metadata was successfully fetched
  
  mintedAt: Timestamp!
  blockNumber: BigInt!
  txHash: String!
  licenses: [MusicLicense!]! @derivedFrom(field: "masterToken")  # Link to purchases
}

# ✅ UPDATED: Track purchased music licenses with createdAt field
type MusicLicense @entity {
  id: ID!
  licenseId: String!           # Unique license ID
  masterTokenId: String!       # Which music NFT was purchased
  masterToken: MusicNFT!       # Link back to the music NFT
  licensee: String!            # Who bought it
  expiry: BigInt!              # When license expires
  active: Boolean!             # Is license still valid
  purchasedAt: Timestamp!      # When purchased
  createdAt: Timestamp!        # ✅ ADDED: Alias for purchasedAt (for query compatibility)
  blockNumber: BigInt!
  txHash: String!
}

type PassportNFT @entity {
  id: ID!
  tokenId: String!
  contract: String!
  owner: String!
  countryCode: String!         # Required
  countryName: String!         # Country name
  region: String!              # Geographic region
  continent: String!           # Continent
  tokenURI: String
  mintedAt: Timestamp!
  blockNumber: BigInt!
  txHash: String!
}

type Itinerary @entity {
  id: ID!
  itineraryId: String!
  creator: String!
  description: String
  price: BigInt!
  active: Boolean!
  createdAt: Timestamp!
  blockNumber: BigInt!
  txHash: String!
  purchases: [ItineraryPurchase!]! @derivedFrom(field: "itinerary")
}

type ItineraryPurchase @entity {
  id: ID!
  itinerary: Itinerary!
  itineraryId: String!
  buyer: String!
  timestamp: Timestamp!
  blockNumber: BigInt!
  txHash: String!
}

type UserStats @entity {
  id: ID!
  address: String!
  musicNFTCount: Int!          # Music created by user
  passportNFTCount: Int!
  itinerariesCreated: Int!
  itinerariesPurchased: Int!
  licensesOwned: Int!          # Licenses purchased by user
  totalNFTs: Int!
  lastActive: Timestamp!
}

type GlobalStats @entity {
  id: ID!
  totalMusicNFTs: Int!
  totalPassports: Int!
  totalItineraries: Int!
  totalItineraryPurchases: Int!
  totalMusicLicensesPurchased: Int!  # Total licenses sold
  totalUsers: Int!
  lastUpdated: Timestamp!
}
